/* 
 * Copyright (C) 2015 Luis Ch√°vez
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.github.luischavez.levsym.modulos.herramientas;

import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

import javax.swing.JPanel;

/**
 *
 * @author Luis
 */
public class Calculator extends JPanel {

    private int IntNumber = 0;
    private Double DoubleNumber = new Double(0);
    private int IntNumber2 = 0;
    private Double DoubleNumber2 = new Double(0);
    private Double tmp = new Double(0);
    private int Operacion = NoOperacion;
    private int Type = NoType;
    private int Type2 = NoType;
    private int IsActive = 0;

    private static int SUMA = 0;
    private static int RESTA = 1;
    private static int MULTIPLICACION = 2;
    private static int DIVISION = 3;
    private static int NoOperacion = 4;

    private static int INTEGER = 0;
    private static int DOUBLE = 1;
    private static int NoType = 4;

    /** Creates new form Calculator */
    public Calculator() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new PanelFocusable();
        Display = new javax.swing.JTextField();
        Button7 = new javax.swing.JButton();
        Button8 = new javax.swing.JButton();
        Button9 = new javax.swing.JButton();
        Button4 = new javax.swing.JButton();
        Button5 = new javax.swing.JButton();
        Button6 = new javax.swing.JButton();
        Button1 = new javax.swing.JButton();
        Button2 = new javax.swing.JButton();
        Button3 = new javax.swing.JButton();
        Button0 = new javax.swing.JButton();
        ButtonDivision = new javax.swing.JButton();
        ButtonMultiplicacion = new javax.swing.JButton();
        ButtonResta = new javax.swing.JButton();
        ButtonPunto = new javax.swing.JButton();
        ButtonSuma = new javax.swing.JButton();
        ButtonIgual = new javax.swing.JButton();
        ButtonCE = new javax.swing.JButton();
        ButtonPlusMinus = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 102, 204));
        setMaximumSize(new java.awt.Dimension(206, 157));
        setMinimumSize(new java.awt.Dimension(206, 157));
        setLayout(new java.awt.GridBagLayout());

        jPanel1.setBackground(new java.awt.Color(0, 153, 255));
        jPanel1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jPanel1KeyPressed(evt);
            }
        });
        jPanel1.setLayout(new java.awt.GridBagLayout());

        Display.setEditable(false);
        Display.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        Display.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.lightGray, null, null));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 180;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(Display, gridBagConstraints);

        Button7.setText("7");
        Button7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button7ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(Button7, gridBagConstraints);

        Button8.setText("8");
        Button8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button8ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(Button8, gridBagConstraints);

        Button9.setText("9");
        Button9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button9ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(Button9, gridBagConstraints);

        Button4.setText("4");
        Button4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(Button4, gridBagConstraints);

        Button5.setText("5");
        Button5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button5ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(Button5, gridBagConstraints);

        Button6.setText("6");
        Button6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button6ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(Button6, gridBagConstraints);

        Button1.setText("1");
        Button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(Button1, gridBagConstraints);

        Button2.setText("2");
        Button2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(Button2, gridBagConstraints);

        Button3.setText("3");
        Button3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(Button3, gridBagConstraints);

        Button0.setText("0");
        Button0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button0ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(Button0, gridBagConstraints);

        ButtonDivision.setText("/");
        ButtonDivision.setMaximumSize(new java.awt.Dimension(41, 23));
        ButtonDivision.setMinimumSize(new java.awt.Dimension(41, 23));
        ButtonDivision.setPreferredSize(new java.awt.Dimension(41, 23));
        ButtonDivision.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonDivisionActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(ButtonDivision, gridBagConstraints);

        ButtonMultiplicacion.setText("*");
        ButtonMultiplicacion.setMaximumSize(new java.awt.Dimension(41, 23));
        ButtonMultiplicacion.setMinimumSize(new java.awt.Dimension(41, 23));
        ButtonMultiplicacion.setPreferredSize(new java.awt.Dimension(41, 23));
        ButtonMultiplicacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonMultiplicacionActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(ButtonMultiplicacion, gridBagConstraints);

        ButtonResta.setText("-");
        ButtonResta.setMaximumSize(new java.awt.Dimension(41, 23));
        ButtonResta.setMinimumSize(new java.awt.Dimension(41, 23));
        ButtonResta.setPreferredSize(new java.awt.Dimension(41, 23));
        ButtonResta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonRestaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(ButtonResta, gridBagConstraints);

        ButtonPunto.setText(".");
        ButtonPunto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonPuntoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(ButtonPunto, gridBagConstraints);

        ButtonSuma.setText("+");
        ButtonSuma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonSumaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(ButtonSuma, gridBagConstraints);

        ButtonIgual.setText("=");
        ButtonIgual.setMaximumSize(new java.awt.Dimension(37, 23));
        ButtonIgual.setMinimumSize(new java.awt.Dimension(37, 23));
        ButtonIgual.setPreferredSize(new java.awt.Dimension(37, 23));
        ButtonIgual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonIgualActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 55;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(ButtonIgual, gridBagConstraints);

        ButtonCE.setText("CE");
        ButtonCE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCEActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(ButtonCE, gridBagConstraints);

        ButtonPlusMinus.setText("-/+");
        ButtonPlusMinus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonPlusMinusActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(ButtonPlusMinus, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(jPanel1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void Button0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button0ActionPerformed
        // TODO add your handling code here:
        Display.setText(Display.getText()+"0");
    }//GEN-LAST:event_Button0ActionPerformed

    private void Button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button1ActionPerformed
        // TODO add your handling code here:
        Display.setText(Display.getText()+"1");
    }//GEN-LAST:event_Button1ActionPerformed

    private void Button2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button2ActionPerformed
        // TODO add your handling code here:
        Display.setText(Display.getText()+"2");
    }//GEN-LAST:event_Button2ActionPerformed

    private void Button3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button3ActionPerformed
        // TODO add your handling code here:
        Display.setText(Display.getText()+"3");
    }//GEN-LAST:event_Button3ActionPerformed

    private void Button4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button4ActionPerformed
        // TODO add your handling code here:
        Display.setText(Display.getText()+"4");
    }//GEN-LAST:event_Button4ActionPerformed

    private void Button5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button5ActionPerformed
        // TODO add your handling code here:
        Display.setText(Display.getText()+"5");
    }//GEN-LAST:event_Button5ActionPerformed

    private void Button6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button6ActionPerformed
        // TODO add your handling code here:
        Display.setText(Display.getText()+"6");
    }//GEN-LAST:event_Button6ActionPerformed

    private void Button7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button7ActionPerformed
        // TODO add your handling code here:
        Display.setText(Display.getText()+"7");
    }//GEN-LAST:event_Button7ActionPerformed

    private void Button8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button8ActionPerformed
        // TODO add your handling code here:
        Display.setText(Display.getText()+"8");
    }//GEN-LAST:event_Button8ActionPerformed

    private void Button9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button9ActionPerformed
        // TODO add your handling code here:
        Display.setText(Display.getText()+"9");
    }//GEN-LAST:event_Button9ActionPerformed

    private void ButtonPuntoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonPuntoActionPerformed
        // TODO add your handling code here:
        Display.setText(Display.getText()+".");
    }//GEN-LAST:event_ButtonPuntoActionPerformed

    private void ButtonSumaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonSumaActionPerformed
        // TODO add your handling code here:
        if(!Display.getText().isEmpty())
        if(Double.parseDouble(Display.getText()) % 1 == 0){
            IntNumber = Double.valueOf(Display.getText()).intValue();
            Type = INTEGER;
        }else{
            DoubleNumber = Double.parseDouble(Display.getText());
            Type = DOUBLE;
        }
        Operacion = SUMA;
        IsActive = 0;
        Display.setText("");
    }//GEN-LAST:event_ButtonSumaActionPerformed

    private void ButtonRestaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonRestaActionPerformed
        // TODO add your handling code here:
        if(!Display.getText().isEmpty())
        if(Double.parseDouble(Display.getText()) % 1 == 0){
            IntNumber = Double.valueOf(Display.getText()).intValue();
            Type = INTEGER;
        }else{
            DoubleNumber = Double.parseDouble(Display.getText());
            Type = DOUBLE;
        }
        Operacion = RESTA;
        IsActive = 0;
        Display.setText("");
    }//GEN-LAST:event_ButtonRestaActionPerformed

    private void ButtonMultiplicacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonMultiplicacionActionPerformed
        // TODO add your handling code here:
        if(!Display.getText().isEmpty())
        if(Double.parseDouble(Display.getText()) % 1 == 0){
            IntNumber = Double.valueOf(Display.getText()).intValue();
            Type = INTEGER;
        }else{
            DoubleNumber = Double.parseDouble(Display.getText());
            Type = DOUBLE;
        }
        Operacion = MULTIPLICACION;
        IsActive = 0;
        Display.setText("");
    }//GEN-LAST:event_ButtonMultiplicacionActionPerformed

    private void ButtonDivisionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonDivisionActionPerformed
        // TODO add your handling code here:
        if(!Display.getText().isEmpty())
        if(Double.parseDouble(Display.getText()) % 1 == 0){
            IntNumber = Double.valueOf(Display.getText()).intValue();
            Type = INTEGER;
        }else{
            DoubleNumber = Double.parseDouble(Display.getText());
            Type = DOUBLE;
        }
        Operacion = DIVISION;
        IsActive = 0;
        Display.setText("");
    }//GEN-LAST:event_ButtonDivisionActionPerformed

    private void ButtonPlusMinusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonPlusMinusActionPerformed
        // TODO add your handling code here:
        if(!Display.getText().isEmpty())
        if(Display.getText().contains("-"))
            Display.setText(Display.getText().replace("-", ""));
        else
            Display.setText("-"+Display.getText());
    }//GEN-LAST:event_ButtonPlusMinusActionPerformed

    private void ButtonCEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonCEActionPerformed
        // TODO add your handling code here:
        Display.setText("");
        IntNumber = 0;
        DoubleNumber = new Double(0);
        IntNumber2 = 0;
        DoubleNumber2 = new Double(0);
        Operacion = NoOperacion;
        Type = NoType;
        Type2 = NoType;
        IsActive = 0;
    }//GEN-LAST:event_ButtonCEActionPerformed

    private void ButtonIgualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonIgualActionPerformed
        // TODO add your handling code here:
        if(!Display.getText().isEmpty()) //Si la pantalla no esta vacia
        if(Double.parseDouble(Display.getText()) % 1 == 0){ //Si el residuo es 0
            if(IsActive == 0){ //Si es una nueva operacion
                IntNumber2 = Double.valueOf(Display.getText()).intValue();
                Type2 = INTEGER;
                IsActive++;
            }
        }else{ //Si el residuo es diferente de 0
            if(IsActive == 0){ //Si es una nueva operacion
                DoubleNumber2 = Double.parseDouble(Display.getText());
                Type2 = DOUBLE;
                IsActive++;
            }
        }
        Display.setText(""); //Limpia la pantalla
        switch(Operacion){
            case 0: //Si es Suma
                switch(Type){
                    case 0: //Si el primer valor es Entero
                        switch(Type2){
                            case 0: //Si el Segundo valor es Entero
                                IntNumber = IntNumber + IntNumber2;
                                Display.setText(String.valueOf(IntNumber));
                                break;
                            case 1: //Si el Segundo valor es Double
                                Display.setText(String.valueOf(IntNumber+DoubleNumber2));
                                break;
                        }
                        break;
                    case 1: //Si el primer valor es Double
                        switch(Type2){
                            case 0: //Si el Segundo valor es Entero
                                Display.setText(String.valueOf(DoubleNumber + IntNumber2));
                                break;
                            case 1: //Si el Segundo valor es Double
                                Display.setText(String.valueOf(DoubleNumber + DoubleNumber2));
                                break;
                        }
                        break;
                }
                break;
            case 1: //Si es Resta
                switch(Type){
                    case 0: //Si el primer valor es Entero
                        switch(Type2){
                            case 0: //Si el Segundo valor es Entero
                                Display.setText(String.valueOf(IntNumber - IntNumber2));
                                break;
                            case 1: //Si el Segundo valor es Double
                                Display.setText(String.valueOf(IntNumber - DoubleNumber2));
                                break;
                        }
                        break;
                    case 1: //Si el primer valor es Double
                        switch(Type2){
                            case 0: //Si el Segundo valor es Entero
                                Display.setText(String.valueOf(DoubleNumber - IntNumber2));
                                break;
                            case 1: //Si el Segundo valor es Double
                                Display.setText(String.valueOf(DoubleNumber - DoubleNumber2));
                                break;
                        }
                        break;
                }
                break;
            case 2: //Si es Multiplicacion
                switch(Type){
                    case 0: //Si el primer valor es Entero
                        switch(Type2){
                            case 0: //Si el Segundo valor es Entero
                                Display.setText(String.valueOf(IntNumber * IntNumber2));
                                break;
                            case 1: //Si el Segundo valor es Double
                                Display.setText(String.valueOf(IntNumber * DoubleNumber2));
                                break;
                        }
                        break;
                    case 1: //Si el primer valor es Double
                        switch(Type2){
                            case 0: //Si el Segundo valor es Entero
                                Display.setText(String.valueOf(DoubleNumber * IntNumber2));
                                break;
                            case 1: //Si el Segundo valor es Double
                                Display.setText(String.valueOf(DoubleNumber * DoubleNumber2));
                                break;
                        }
                        break;
                }
                break;
            case 3: //Si es Division
                switch(Type){
                    case 0: //Si el primer valor es Entero
                        switch(Type2){
                            case 0: //Si el Segundo valor es Entero
                                if(IntNumber % IntNumber2 == 0)
                                    Display.setText(String.valueOf((IntNumber / IntNumber2)));
                                else
                                    Display.setText(String.valueOf((double)IntNumber / IntNumber2));
                                break;
                            case 1: //Si el Segundo valor es Double
                                if(IntNumber % DoubleNumber2 == 0)
                                    Display.setText(String.valueOf((int)(IntNumber / DoubleNumber2)));
                                else
                                    Display.setText(String.valueOf((IntNumber / DoubleNumber2)));
                                break;
                        }
                        break;
                    case 1: //Si el primer valor es Double
                        switch(Type2){
                            case 0: //Si el Segundo valor es Entero
                                Display.setText(String.valueOf(DoubleNumber / IntNumber2));
                                break;
                            case 1: //Si el Segundo valor es Double
                                Display.setText(String.valueOf(DoubleNumber / DoubleNumber2));
                                break;
                        }
                        break;
                }
                break;
        }
    }//GEN-LAST:event_ButtonIgualActionPerformed

    private void jPanel1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPanel1KeyPressed
        // TODO add your handling code here:
        System.out.println(evt.getKeyCode());
        if(Character.isDigit(evt.getKeyChar()) || evt.getKeyCode() == 110)
            Display.setText(Display.getText()+evt.getKeyChar());
    }//GEN-LAST:event_jPanel1KeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Button0;
    private javax.swing.JButton Button1;
    private javax.swing.JButton Button2;
    private javax.swing.JButton Button3;
    private javax.swing.JButton Button4;
    private javax.swing.JButton Button5;
    private javax.swing.JButton Button6;
    private javax.swing.JButton Button7;
    private javax.swing.JButton Button8;
    private javax.swing.JButton Button9;
    private javax.swing.JButton ButtonCE;
    private javax.swing.JButton ButtonDivision;
    private javax.swing.JButton ButtonIgual;
    private javax.swing.JButton ButtonMultiplicacion;
    private javax.swing.JButton ButtonPlusMinus;
    private javax.swing.JButton ButtonPunto;
    private javax.swing.JButton ButtonResta;
    private javax.swing.JButton ButtonSuma;
    private javax.swing.JTextField Display;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

}

class PanelFocusable extends JPanel implements MouseListener{

    @Override
    public boolean isFocusable(){
        return true;
    }

    @Override
    public void mouseClicked(MouseEvent e) {
    }

    @Override
    public void mousePressed(MouseEvent e) {
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        this.requestFocus();
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }

}
