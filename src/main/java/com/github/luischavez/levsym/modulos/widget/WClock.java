/* 
 * Copyright (C) 2015 Luis Ch√°vez
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.github.luischavez.levsym.modulos.widget;

import com.github.luischavez.levsym.modulos.funcion.Log;

import java.awt.Color;
import java.util.Calendar;
import java.util.TimeZone;

/**
 *
 * @author Luis
 */
public class WClock extends javax.swing.JPanel {

    private static Thread thread;

    /**
     * Creates new form WClock
     */
    public WClock(Color bg, Color fg) {
        initComponents();

        /*
         * Selecciona los colores
         */
        this.SetBackground(bg);
        SetBackground(bg);
        SetForeground(fg);

        /*
         * Inicia un nuevo Thread
         */
        thread = new Thread(new Runnable() {
            @Override
            public void run() {
                while (true) {
                    try {
                        thread.sleep(1000); //Detiene el Thread por 1 segundo
                        Inter.setText(":");
                        thread.sleep(1000); //Detiene el Thread por 1 segundo
                        Inter.setText("");
                        SetClock(GetTime());
                    } catch (InterruptedException ex) {
                        Log.SaveLog(ex.toString());
                    }
                }
            }
        });
        thread.start(); //Inicia el Thread
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        Hour = new javax.swing.JTextField();
        Inter = new javax.swing.JTextField();
        Minute = new javax.swing.JTextField();
        AM_PM = new javax.swing.JTextField();

        setMaximumSize(new java.awt.Dimension(100, 42));
        setMinimumSize(new java.awt.Dimension(100, 42));
        setPreferredSize(new java.awt.Dimension(100, 42));
        setLayout(new java.awt.GridBagLayout());

        Hour.setEditable(false);
        Hour.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Hour.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.5;
        gridBagConstraints.weighty = 1.5;
        add(Hour, gridBagConstraints);

        Inter.setEditable(false);
        Inter.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Inter.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Inter.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.5;
        gridBagConstraints.weighty = 1.5;
        add(Inter, gridBagConstraints);

        Minute.setEditable(false);
        Minute.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Minute.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.5;
        gridBagConstraints.weighty = 1.5;
        add(Minute, gridBagConstraints);

        AM_PM.setEditable(false);
        AM_PM.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        AM_PM.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.5;
        gridBagConstraints.weighty = 1.5;
        add(AM_PM, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AM_PM;
    private javax.swing.JTextField Hour;
    private javax.swing.JTextField Inter;
    private javax.swing.JTextField Minute;
    // End of variables declaration//GEN-END:variables

    /**
     * Dibuja la hora
     *
     */
    private void SetClock(int[] Time) {
        Hour.setText(Integer.toString(Time[0]));
        Minute.setText(Integer.toString(Time[1]));
        if (Time[2] == 1) {
            AM_PM.setText("PM");
        } else {
            AM_PM.setText("AM");
        }
    }

    /**
     * Obtiene la hora del sistema
     *
     */
    private int[] GetTime() {
        Calendar c = Calendar.getInstance(TimeZone.getDefault());
        int[] Time = {
            c.get(Calendar.HOUR),
            c.get(Calendar.MINUTE),
            c.get(Calendar.AM_PM)
        };
        return Time;
    }

    /**
     * Dibuja el color de fondo
     *
     */
    private void SetBackground(Color c) {
        this.Hour.setBackground(c);
        this.Inter.setBackground(c);
        this.Minute.setBackground(c);
        this.AM_PM.setBackground(c);
    }

    /**
     * Color de letra
     *
     */
    private void SetForeground(Color c) {
        this.Hour.setForeground(c);
        this.Inter.setForeground(c);
        this.Minute.setForeground(c);
        this.AM_PM.setForeground(c);
    }

}
